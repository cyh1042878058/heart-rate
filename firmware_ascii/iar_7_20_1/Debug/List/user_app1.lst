###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        17/Nov/2018  14:23:46
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\10428\Desktop\项目model\firmware_common\application\user_app1.c
#    Command line =  
#        C:\Users\10428\Desktop\项目model\firmware_common\application\user_app1.c
#        -D EIE1 --preprocess=cl
#        C:\Users\10428\Desktop\项目model\firmware_ascii\iar_7_20_1\Debug\List\
#        -lC
#        C:\Users\10428\Desktop\项目model\firmware_ascii\iar_7_20_1\Debug\List\
#        -o
#        C:\Users\10428\Desktop\项目model\firmware_ascii\iar_7_20_1\Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        D:\EiE\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Users\10428\Desktop\项目model\firmware_ascii\iar_7_20_1\ -I
#        C:\Users\10428\Desktop\项目model\firmware_ascii\iar_7_20_1\..\bsp\ -I
#        C:\Users\10428\Desktop\项目model\firmware_ascii\iar_7_20_1\..\drivers\
#        -I
#        C:\Users\10428\Desktop\项目model\firmware_ascii\iar_7_20_1\..\application\
#        -I
#        C:\Users\10428\Desktop\项目model\firmware_ascii\iar_7_20_1\..\..\firmware_common\
#        -I
#        C:\Users\10428\Desktop\项目model\firmware_ascii\iar_7_20_1\..\..\firmware_common\application\
#        -I
#        C:\Users\10428\Desktop\项目model\firmware_ascii\iar_7_20_1\..\..\firmware_common\cmsis\
#        -I
#        C:\Users\10428\Desktop\项目model\firmware_ascii\iar_7_20_1\..\..\firmware_common\drivers\
#        -On --use_c++_inline --require_prototypes -I D:\EiE\arm\CMSIS\Include\
#    List file    =  
#        C:\Users\10428\Desktop\项目model\firmware_ascii\iar_7_20_1\Debug\List\user_app1.lst
#    Object file  =  
#        C:\Users\10428\Desktop\项目model\firmware_ascii\iar_7_20_1\Debug\Obj\user_app1.o
#
###############################################################################

C:\Users\10428\Desktop\项目model\firmware_common\application\user_app1.c
      1          /**********************************************************************************************************************
      2          File: user_app1.c                                                                
      3          
      4          ----------------------------------------------------------------------------------------------------------------------
      5          To start a new task using this user_app1 as a template:
      6           1. Copy both user_app1.c and user_app1.h to the Application directory
      7           2. Rename the files yournewtaskname.c and yournewtaskname.h
      8           3. Add yournewtaskname.c and yournewtaskname.h to the Application Include and Source groups in the IAR project
      9           4. Use ctrl-h (make sure "Match Case" is checked) to find and replace all instances of "user_app1" with "yournewtaskname"
     10           5. Use ctrl-h to find and replace all instances of "UserApp1" with "YourNewTaskName"
     11           6. Use ctrl-h to find and replace all instances of "USER_APP1" with "YOUR_NEW_TASK_NAME"
     12           7. Add a call to YourNewTaskNameInitialize() in the init section of main
     13           8. Add a call to YourNewTaskNameRunActiveState() in the Super Loop section of main
     14           9. Update yournewtaskname.h per the instructions at the top of yournewtaskname.h
     15          10. Delete this text (between the dashed lines) and update the Description below to describe your task
     16          ----------------------------------------------------------------------------------------------------------------------
     17          
     18          Description:
     19          This is a user_app1.c file template 
     20          
     21          ------------------------------------------------------------------------------------------------------------------------
     22          API:
     23          
     24          Public functions:
     25          
     26          
     27          Protected System functions:
     28          void UserApp1Initialize(void)
     29          Runs required initialzation for the task.  Should only be called once in main init section.
     30          
     31          void UserApp1RunActiveState(void)
     32          Runs current task state.  Should only be called once in main loop.
     33          
     34          
     35          **********************************************************************************************************************/
     36          
     37          #include "configuration.h"
     38          
     39          /***********************************************************************************************************************
     40          Global variable definitions with scope across entire project.
     41          All Global variable names shall start with "G_UserApp1"
     42          ***********************************************************************************************************************/
     43          /* New variables */

   \                                 In section .bss, align 4
     44          volatile u32 G_u32UserApp1Flags;                       /* Global state flags */
   \                     G_u32UserApp1Flags:
   \   00000000                      DS8 4
     45          
     46          
     47          /*--------------------------------------------------------------------------------------------------------------------*/
     48          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     49          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     50          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
     51          
     52          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     53          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     54          extern u32 G_u32AntApiCurrentMessageTimeStamp;                    
     55          extern AntApplicationMessageType G_eAntApiCurrentMessageClass;    
     56          extern u8 G_au8AntApiCurrentMessageBytes[ANT_APPLICATION_MESSAGE_BYTES];  
     57          extern AntExtendedDataType G_sAntApiCurrentMessageExtData; 
     58          
     59          /***********************************************************************************************************************
     60          Global variable definitions with scope limited to this local application.
     61          Variable names shall start with "UserApp1_" and be declared as static.
     62          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
     63          static fnCode_type UserApp1_StateMachine;            /* The state machine function pointer */
   \                     UserApp1_StateMachine:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     64          static u32 UserApp1_u32Timeout;                      /* Timeout counter used across states */
   \                     UserApp1_u32Timeout:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     65          static AntAssignChannelInfoType UserApp1_sChannelInfo;
   \                     UserApp1_sChannelInfo:
   \   00000000                      DS8 20
     66          static u32 u32AntDataCount;
     67          static u32 u32AntTickCount;

   \                                 In section .bss, align 4
     68          static u32  u32ledFrequency;
   \                     u32ledFrequency:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
     69          static u8 au8DataContent_PID[] = "   ";
   \                     au8DataContent_PID:
   \   00000000   0x20 0x20          DC8 "   "
   \              0x20 0x00    

   \                                 In section .data, align 4
     70          static u8 au8DataContent_Rate[] = "xxx";
   \                     au8DataContent_Rate:
   \   00000000   0x78 0x78          DC8 "xxx"
   \              0x78 0x00    

   \                                 In section .data, align 4
     71          static u8 au8DataContent_Battery[] = "   ";
   \                     au8DataContent_Battery:
   \   00000000   0x20 0x20          DC8 "   "
   \              0x20 0x00    

   \                                 In section .data, align 4
     72          static u8 au8DataContent_MID[] ="   ";
   \                     au8DataContent_MID:
   \   00000000   0x20 0x20          DC8 "   "
   \              0x20 0x00    
     73          static u8 au8DataContent_count[]="xxx";
     74          static u32 UserApp1_u32DataMsgCount = 0;   /* ANT_DATA packets received */
     75          static u32 UserApp1_u32TickMsgCount = 0;   /* ANT_TICK packets received */

   \                                 In section .bss, align 1
     76          static u8 Key = 0;
   \                     Key:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     77          static u8 abc = 0;
   \                     abc:
   \   00000000                      DS8 1
     78          static u8 i=0;
     79          /**********************************************************************************************************************
     80          Function Definitions
     81          **********************************************************************************************************************/
     82          
     83          /*--------------------------------------------------------------------------------------------------------------------*/
     84          /* Public functions                                                                                                   */
     85          /*--------------------------------------------------------------------------------------------------------------------*/
     86          
     87          /*--------------------------------------------------------------------------------------------------------------------*/
     88          /* Protected functions                                                                                                */
     89          /*--------------------------------------------------------------------------------------------------------------------*/
     90          
     91          /*--------------------------------------------------------------------------------------------------------------------
     92          Function: UserApp1Initialize
     93          
     94          Description:
     95          Initializes the State Machine and its variables.
     96          
     97          Requires:
     98            -
     99          
    100          Promises:
    101            - 
    102          */

   \                                 In section .text, align 2, keep-with-next
    103          void UserApp1Initialize(void)
    104          { 
   \                     UserApp1Initialize: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    105            UserApp1_sChannelInfo.AntChannel          = ANT_CHANNEL_USERAPP;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x....             LDR.N    R1,??DataTable3_1
   \   00000006   0x7008             STRB     R0,[R1, #+0]
    106            UserApp1_sChannelInfo.AntChannelPeriodHi  = ANT_CHANNEL_PERIOD_HI_USERAPP;
   \   00000008   0x201F             MOVS     R0,#+31
   \   0000000A   0x....             LDR.N    R1,??DataTable3_1
   \   0000000C   0x7408             STRB     R0,[R1, #+16]
    107            UserApp1_sChannelInfo.AntChannelPeriodLo  = ANT_CHANNEL_PERIOD_LO_USERAPP;
   \   0000000E   0x2086             MOVS     R0,#+134
   \   00000010   0x....             LDR.N    R1,??DataTable3_1
   \   00000012   0x73C8             STRB     R0,[R1, #+15]
    108            UserApp1_sChannelInfo.AntChannelType      = ANT_CHANNEL_TYPE_USERAPP;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x....             LDR.N    R1,??DataTable3_1
   \   00000018   0x7048             STRB     R0,[R1, #+1]
    109            UserApp1_sChannelInfo.AntDeviceIdHi       = ANT_DEVICEID_HI_USERAPP;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x....             LDR.N    R1,??DataTable3_1
   \   0000001E   0x7308             STRB     R0,[R1, #+12]
    110            UserApp1_sChannelInfo.AntDeviceIdLo       = ANT_DEVICEID_LO_USERAPP;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x....             LDR.N    R1,??DataTable3_1
   \   00000024   0x72C8             STRB     R0,[R1, #+11]
    111            UserApp1_sChannelInfo.AntDeviceType       = ANT_DEVICE_TYPE_USERAPP;
   \   00000026   0x2078             MOVS     R0,#+120
   \   00000028   0x....             LDR.N    R1,??DataTable3_1
   \   0000002A   0x7348             STRB     R0,[R1, #+13]
    112            UserApp1_sChannelInfo.AntFrequency        = ANT_FREQUENCY_USERAPP;
   \   0000002C   0x2039             MOVS     R0,#+57
   \   0000002E   0x....             LDR.N    R1,??DataTable3_1
   \   00000030   0x7448             STRB     R0,[R1, #+17]
    113            UserApp1_sChannelInfo.AntTransmissionType = ANT_TRANSMISSION_TYPE_USERAPP;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x....             LDR.N    R1,??DataTable3_1
   \   00000036   0x7388             STRB     R0,[R1, #+14]
    114            UserApp1_sChannelInfo.AntTxPower          = ANT_TX_POWER_USERAPP;
   \   00000038   0x2003             MOVS     R0,#+3
   \   0000003A   0x....             LDR.N    R1,??DataTable3_1
   \   0000003C   0x7488             STRB     R0,[R1, #+18]
    115            UserApp1_sChannelInfo.AntNetwork          = ANT_NETWORK_DEFAULT;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x....             LDR.N    R1,??DataTable3_1
   \   00000042   0x7088             STRB     R0,[R1, #+2]
    116            UserApp1_sChannelInfo.AntNetworkKey[0]    = 0xB9;
   \   00000044   0x20B9             MOVS     R0,#+185
   \   00000046   0x....             LDR.N    R1,??DataTable3_1
   \   00000048   0x70C8             STRB     R0,[R1, #+3]
    117            UserApp1_sChannelInfo.AntNetworkKey[1]    = 0xA5;
   \   0000004A   0x20A5             MOVS     R0,#+165
   \   0000004C   0x....             LDR.N    R1,??DataTable3_1
   \   0000004E   0x7108             STRB     R0,[R1, #+4]
    118            UserApp1_sChannelInfo.AntNetworkKey[2]    = 0x21;
   \   00000050   0x2021             MOVS     R0,#+33
   \   00000052   0x....             LDR.N    R1,??DataTable3_1
   \   00000054   0x7148             STRB     R0,[R1, #+5]
    119            UserApp1_sChannelInfo.AntNetworkKey[3]    = 0xFB;
   \   00000056   0x20FB             MOVS     R0,#+251
   \   00000058   0x....             LDR.N    R1,??DataTable3_1
   \   0000005A   0x7188             STRB     R0,[R1, #+6]
    120            UserApp1_sChannelInfo.AntNetworkKey[4]    = 0xBD;
   \   0000005C   0x20BD             MOVS     R0,#+189
   \   0000005E   0x....             LDR.N    R1,??DataTable3_1
   \   00000060   0x71C8             STRB     R0,[R1, #+7]
    121            UserApp1_sChannelInfo.AntNetworkKey[5]    = 0x72;
   \   00000062   0x2072             MOVS     R0,#+114
   \   00000064   0x....             LDR.N    R1,??DataTable3_1
   \   00000066   0x7208             STRB     R0,[R1, #+8]
    122            UserApp1_sChannelInfo.AntNetworkKey[6]    = 0xC3;
   \   00000068   0x20C3             MOVS     R0,#+195
   \   0000006A   0x....             LDR.N    R1,??DataTable3_1
   \   0000006C   0x7248             STRB     R0,[R1, #+9]
    123            UserApp1_sChannelInfo.AntNetworkKey[7]    = 0x45;
   \   0000006E   0x2045             MOVS     R0,#+69
   \   00000070   0x....             LDR.N    R1,??DataTable3_1
   \   00000072   0x7288             STRB     R0,[R1, #+10]
    124            /* Try to queue the ANT channel setup */
    125            if(AntAssignChannel(&UserApp1_sChannelInfo))
   \   00000074   0x....             LDR.N    R0,??DataTable3_1
   \   00000076   0x.... 0x....      BL       AntAssignChannel
   \   0000007A   0x2800             CMP      R0,#+0
   \   0000007C   0xD01A             BEQ.N    ??UserApp1Initialize_0
    126            {
    127              LedOff(RED);
   \   0000007E   0x2007             MOVS     R0,#+7
   \   00000080   0x.... 0x....      BL       LedOff
    128              LedOff(YELLOW);
   \   00000084   0x2005             MOVS     R0,#+5
   \   00000086   0x.... 0x....      BL       LedOff
    129              LedOff(BLUE);
   \   0000008A   0x2002             MOVS     R0,#+2
   \   0000008C   0x.... 0x....      BL       LedOff
    130              LedOn(LCD_RED);
   \   00000090   0x2008             MOVS     R0,#+8
   \   00000092   0x.... 0x....      BL       LedOn
    131              LedOn(LCD_GREEN);
   \   00000096   0x2009             MOVS     R0,#+9
   \   00000098   0x.... 0x....      BL       LedOn
    132              LedOn(LCD_BLUE);
   \   0000009C   0x200A             MOVS     R0,#+10
   \   0000009E   0x.... 0x....      BL       LedOn
    133              UserApp1_u32Timeout = G_u32SystemTime1ms;
   \   000000A2   0x....             LDR.N    R0,??DataTable3_2
   \   000000A4   0x6800             LDR      R0,[R0, #+0]
   \   000000A6   0x....             LDR.N    R1,??DataTable3_3
   \   000000A8   0x6008             STR      R0,[R1, #+0]
    134              UserApp1_StateMachine = UserApp1SM_AntChannelAssign;
   \   000000AA   0x.... 0x....      ADR.W    R0,UserApp1SM_AntChannelAssign
   \   000000AE   0x....             LDR.N    R1,??DataTable3_4
   \   000000B0   0x6008             STR      R0,[R1, #+0]
   \   000000B2   0xE00A             B.N      ??UserApp1Initialize_1
    135            }
    136            else
    137            {
    138              /* The Task isn't properly initialized, so shut it down and don't run */
    139              LedBlink(RED,LED_4HZ);
   \                     ??UserApp1Initialize_0: (+1)
   \   000000B4   0x217D             MOVS     R1,#+125
   \   000000B6   0x2007             MOVS     R0,#+7
   \   000000B8   0x.... 0x....      BL       LedBlink
    140              DebugPrintf(" Task initialized failed\n ");
   \   000000BC   0x....             LDR.N    R0,??DataTable3_5
   \   000000BE   0x.... 0x....      BL       DebugPrintf
    141              UserApp1_StateMachine = UserApp1SM_Error;
   \   000000C2   0x.... 0x....      ADR.W    R0,UserApp1SM_Error
   \   000000C6   0x....             LDR.N    R1,??DataTable3_4
   \   000000C8   0x6008             STR      R0,[R1, #+0]
    142            }
    143          } /* end UserApp1Initialize() */
   \                     ??UserApp1Initialize_1: (+1)
   \   000000CA   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
    144          static void UserApp1SM_AntChannelAssign()
    145          {
   \                     UserApp1SM_AntChannelAssign: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    146            if(AntRadioStatusChannel(ANT_CHANNEL_USERAPP) == ANT_CONFIGURED )
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       AntRadioStatusChannel
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD106             BNE.N    ??UserApp1SM_AntChannelAssign_0
    147            {
    148              /* Channel assignemnt is successful ,so open channel and proceed to idle state */
    149              AntOpenChannelNumber(ANT_CHANNEL_USERAPP);
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x.... 0x....      BL       AntOpenChannelNumber
    150              UserApp1_StateMachine = UserApp1SM_Idle;
   \   00000012   0x.... 0x....      ADR.W    R0,UserApp1SM_Idle
   \   00000016   0x....             LDR.N    R1,??DataTable3_4
   \   00000018   0x6008             STR      R0,[R1, #+0]
    151            }
    152            
    153            /* Watch for time out */
    154            if(IsTimeUp(&UserApp1_u32Timeout,3000))
   \                     ??UserApp1SM_AntChannelAssign_0: (+1)
   \   0000001A   0xF640 0x31B8      MOVW     R1,#+3000
   \   0000001E   0x....             LDR.N    R0,??DataTable3_3
   \   00000020   0x.... 0x....      BL       IsTimeUp
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD006             BEQ.N    ??UserApp1SM_AntChannelAssign_1
    155            {
    156              DebugPrintf(" User app setup failed\n ");
   \   00000028   0x....             LDR.N    R0,??DataTable3_6
   \   0000002A   0x.... 0x....      BL       DebugPrintf
    157              UserApp1_StateMachine = UserApp1SM_Error;
   \   0000002E   0x.... 0x....      ADR.W    R0,UserApp1SM_Error
   \   00000032   0x....             LDR.N    R1,??DataTable3_4
   \   00000034   0x6008             STR      R0,[R1, #+0]
    158            }
    159          } /* end UserApp1SM_AntChannelAssign */
   \                     ??UserApp1SM_AntChannelAssign_1: (+1)
   \   00000036   0xBD01             POP      {R0,PC}          ;; return
    160            
    161          /*----------------------------------------------------------------------------------------------------------------------
    162          Function UserApp1RunActiveState()
    163          
    164          Description:
    165          Selects and runs one iteration of the current state in the state machine.
    166          All state machines have a TOTAL of 1ms to execute, so on average n state machines
    167          may take 1ms / n to execute.
    168          
    169          Requires:
    170            - State machine function pointer points at current state
    171          
    172          Promises:
    173            - Calls the function to pointed by the state machine function pointer
    174          */

   \                                 In section .text, align 2, keep-with-next
    175          void UserApp1RunActiveState(void)
    176          {
   \                     UserApp1RunActiveState: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    177            UserApp1_StateMachine();
   \   00000002   0x....             LDR.N    R0,??DataTable3_4
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4780             BLX      R0
    178          
    179          } /* end UserApp1RunActiveState */
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    180          
    181          
    182          /*--------------------------------------------------------------------------------------------------------------------*/
    183          /* Private functions                                                                                                  */
    184          /*--------------------------------------------------------------------------------------------------------------------*/
    185          
    186          
    187          /**********************************************************************************************************************
    188          State Machine Function Definitions
    189          **********************************************************************************************************************/
    190          
    191          /*-------------------------------------------------------------------------------------------------------------------*/
    192          /* Wait for ??? */

   \                                 In section .text, align 4, keep-with-next
    193          static void UserApp1SM_Idle(void)
    194          {
   \                     UserApp1SM_Idle: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    195            /* Command to Get the battery page */
    196              static u8 au8CommonDataPage_B[8]   = {0x46, 0xff, 0xff, 0xff, 0xff, 0x80, 0x07, 0x01};
    197              /* Command to Get the manufacturer information page */
    198              static u8 au8CommonDataPage_MID[8] = {0x46, 0xff, 0xff, 0xff, 0xff, 0x80, 0x02, 0x01};
    199              
    200              /* Command to Get the manufacturer information page */
    201              static u8 au8CommonDataPage_P[8]   = {0x46, 0xff, 0xff, 0xff, 0xff, 0x80, 0x03, 0x01};
    202          
    203              /* If BUTTON3 was pressed the HRM will transmit the battery page */
    204              if(WasButtonPressed(BUTTON3))
   \   00000002   0x2003             MOVS     R0,#+3
   \   00000004   0x.... 0x....      BL       WasButtonPressed
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD006             BEQ.N    ??UserApp1SM_Idle_0
    205              {
    206                ButtonAcknowledge(BUTTON3);
   \   0000000C   0x2003             MOVS     R0,#+3
   \   0000000E   0x.... 0x....      BL       ButtonAcknowledge
    207                AntQueueAcknowledgedMessage(ANT_CHANNEL_0, au8CommonDataPage_B);
   \   00000012   0x....             LDR.N    R1,??DataTable3_7
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      BL       AntQueueAcknowledgedMessage
    208              }
    209              /* If BUTTON1 was pressed the slave transmit the run mode change page to change the mode*/
    210             if(WasButtonPressed(BUTTON1))
   \                     ??UserApp1SM_Idle_0: (+1)
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x.... 0x....      BL       WasButtonPressed
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD006             BEQ.N    ??UserApp1SM_Idle_1
    211              {
    212                ButtonAcknowledge(BUTTON1);
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x.... 0x....      BL       ButtonAcknowledge
    213                AntQueueAcknowledgedMessage(ANT_CHANNEL_0, au8CommonDataPage_P);
   \   0000002A   0x....             LDR.N    R1,??DataTable3_8
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x.... 0x....      BL       AntQueueAcknowledgedMessage
    214              }
    215           
    216              if(WasButtonPressed(BUTTON2))
   \                     ??UserApp1SM_Idle_1: (+1)
   \   00000032   0x2002             MOVS     R0,#+2
   \   00000034   0x.... 0x....      BL       WasButtonPressed
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD006             BEQ.N    ??UserApp1SM_Idle_2
    217              {
    218                ButtonAcknowledge(BUTTON2);
   \   0000003C   0x2002             MOVS     R0,#+2
   \   0000003E   0x.... 0x....      BL       ButtonAcknowledge
    219                AntQueueAcknowledgedMessage(ANT_CHANNEL_0, au8CommonDataPage_MID);
   \   00000042   0x....             LDR.N    R1,??DataTable3_9
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x.... 0x....      BL       AntQueueAcknowledgedMessage
    220              }
    221              /* Read buffer */
    222              if( AntReadAppMessageBuffer() )
   \                     ??UserApp1SM_Idle_2: (+1)
   \   0000004A   0x.... 0x....      BL       AntReadAppMessageBuffer
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xF000 0x80D6      BEQ.W    ??UserApp1SM_Idle_3
    223              {
    224              /* New data message: check what it is */
    225                if(G_eAntApiCurrentMessageClass == ANT_DATA)
   \   00000054   0x....             LDR.N    R0,??DataTable3_10
   \   00000056   0x7800             LDRB     R0,[R0, #+0]
   \   00000058   0x2801             CMP      R0,#+1
   \   0000005A   0xF040 0x80D1      BNE.W    ??UserApp1SM_Idle_4
    226                {
    227                  /* Check which message it is */
    228                  Key = (G_au8AntApiCurrentMessageBytes[0] & 0x7f);
   \   0000005E   0x....             LDR.N    R0,??DataTable3_11
   \   00000060   0x7800             LDRB     R0,[R0, #+0]
   \   00000062   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   00000066   0x....             LDR.N    R1,??DataTable3_12
   \   00000068   0x7008             STRB     R0,[R1, #+0]
    229                  switch(Key)
   \   0000006A   0x....             LDR.N    R0,??DataTable3_12
   \   0000006C   0x7800             LDRB     R0,[R0, #+0]
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD011             BEQ.N    ??UserApp1SM_Idle_5
   \   00000072   0x2802             CMP      R0,#+2
   \   00000074   0xD071             BEQ.N    ??UserApp1SM_Idle_6
   \   00000076   0xD36F             BCC.N    ??UserApp1SM_Idle_7
   \   00000078   0x2804             CMP      R0,#+4
   \   0000007A   0xF000 0x8091      BEQ.W    ??UserApp1SM_Idle_8
   \   0000007E   0xD37C             BCC.N    ??UserApp1SM_Idle_9
   \   00000080   0x2806             CMP      R0,#+6
   \   00000082   0xF000 0x808F      BEQ.W    ??UserApp1SM_Idle_10
   \   00000086   0xF0C0 0x808C      BCC.W    ??UserApp1SM_Idle_11
   \   0000008A   0x2808             CMP      R0,#+8
   \   0000008C   0xF000 0x80B7      BEQ.W    ??UserApp1SM_Idle_12
   \   00000090   0xF0C0 0x8089      BCC.W    ??UserApp1SM_Idle_13
   \   00000094   0xE0B4             B.N      ??UserApp1SM_Idle_3
    230                  { 
    231                    /* Page 0 */
    232                    case 0:
    233                      Key = NumberToAscii(G_au8AntApiCurrentMessageBytes[7], au8DataContent_Rate);       
   \                     ??UserApp1SM_Idle_5: (+1)
   \   00000096   0x....             LDR.N    R1,??DataTable3_13
   \   00000098   0x....             LDR.N    R0,??DataTable3_11
   \   0000009A   0x79C0             LDRB     R0,[R0, #+7]
   \   0000009C   0x.... 0x....      BL       NumberToAscii
   \   000000A0   0x....             LDR.N    R1,??DataTable3_12
   \   000000A2   0x7008             STRB     R0,[R1, #+0]
    234                      LCDCommand(LCD_CLEAR_CMD);
   \   000000A4   0x2001             MOVS     R0,#+1
   \   000000A6   0x.... 0x....      BL       LCDCommand
    235                      LCDMessage(LINE2_START_ADDR, "The heart rate:");
   \   000000AA   0x....             LDR.N    R1,??DataTable3_14
   \   000000AC   0x2040             MOVS     R0,#+64
   \   000000AE   0x.... 0x....      BL       LCDMessage
    236                      LCDMessage(LINE2_START_ADDR+15, au8DataContent_Rate);
   \   000000B2   0x....             LDR.N    R1,??DataTable3_13
   \   000000B4   0x204F             MOVS     R0,#+79
   \   000000B6   0x.... 0x....      BL       LCDMessage
    237                      
    238                      
    239                     LCDMessage(LINE1_START_ADDR, au8DataContent_Battery);
   \   000000BA   0x....             LDR.N    R1,??DataTable3_15
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0x.... 0x....      BL       LCDMessage
    240                      LCDMessage(LINE1_START_ADDR + 3, "%");
   \   000000C2   0x....             ADR.N    R1,??DataTable3  ;; "%"
   \   000000C4   0x2003             MOVS     R0,#+3
   \   000000C6   0x.... 0x....      BL       LCDMessage
    241                      
    242                      LCDMessage(LINE1_START_ADDR + 5, "MID:");
   \   000000CA   0x....             LDR.N    R1,??DataTable3_16
   \   000000CC   0x2005             MOVS     R0,#+5
   \   000000CE   0x.... 0x....      BL       LCDMessage
    243                      LCDMessage(LINE1_START_ADDR + 10, au8DataContent_MID);
   \   000000D2   0x....             LDR.N    R1,??DataTable3_17
   \   000000D4   0x200A             MOVS     R0,#+10
   \   000000D6   0x.... 0x....      BL       LCDMessage
    244                      
    245                      if(G_au8AntApiCurrentMessageBytes[7] >= 100)
   \   000000DA   0x....             LDR.N    R0,??DataTable3_11
   \   000000DC   0x79C0             LDRB     R0,[R0, #+7]
   \   000000DE   0x2864             CMP      R0,#+100
   \   000000E0   0xDB1E             BLT.N    ??UserApp1SM_Idle_14
    246                      { 
    247                        abc=G_au8AntApiCurrentMessageBytes[7];
   \   000000E2   0x....             LDR.N    R0,??DataTable3_11
   \   000000E4   0x79C0             LDRB     R0,[R0, #+7]
   \   000000E6   0x....             LDR.N    R1,??DataTable3_18
   \   000000E8   0x7008             STRB     R0,[R1, #+0]
    248                        u32ledFrequency=-(abc*abc/30)+8*abc-400 ;
   \   000000EA   0x....             LDR.N    R0,??DataTable3_18
   \   000000EC   0x7800             LDRB     R0,[R0, #+0]
   \   000000EE   0x....             LDR.N    R1,??DataTable3_18
   \   000000F0   0x7809             LDRB     R1,[R1, #+0]
   \   000000F2   0x4348             MULS     R0,R1,R0
   \   000000F4   0xF07F 0x011D      MVNS     R1,#+29
   \   000000F8   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000000FC   0x....             LDR.N    R1,??DataTable3_18
   \   000000FE   0x7809             LDRB     R1,[R1, #+0]
   \   00000100   0xEB10 0x00C1      ADDS     R0,R0,R1, LSL #+3
   \   00000104   0xF5B0 0x70C8      SUBS     R0,R0,#+400
   \   00000108   0x....             LDR.N    R1,??DataTable3_19
   \   0000010A   0x6008             STR      R0,[R1, #+0]
    249                        LedOn(RED);
   \   0000010C   0x2007             MOVS     R0,#+7
   \   0000010E   0x.... 0x....      BL       LedOn
    250                        LedBlink(RED,u32ledFrequency);
                                            ^
Warning[Pe188]: enumerated type mixed with another type
   \   00000112   0x....             LDR.N    R0,??DataTable3_19
   \   00000114   0x6801             LDR      R1,[R0, #+0]
   \   00000116   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000118   0x2007             MOVS     R0,#+7
   \   0000011A   0x.... 0x....      BL       LedBlink
   \   0000011E   0xE01A             B.N      ??UserApp1SM_Idle_15
    251          
    252          
    253                      }
    254                      else if(G_au8AntApiCurrentMessageBytes[7] <= 50)
   \                     ??UserApp1SM_Idle_14: (+1)
   \   00000120   0x....             LDR.N    R0,??DataTable3_11
   \   00000122   0x79C0             LDRB     R0,[R0, #+7]
   \   00000124   0x2833             CMP      R0,#+51
   \   00000126   0xDA10             BGE.N    ??UserApp1SM_Idle_16
    255                      {
    256                        u32ledFrequency=G_au8AntApiCurrentMessageBytes[7];
   \   00000128   0x....             LDR.N    R0,??DataTable3_11
   \   0000012A   0x79C0             LDRB     R0,[R0, #+7]
   \   0000012C   0x....             LDR.N    R1,??DataTable3_19
   \   0000012E   0x6008             STR      R0,[R1, #+0]
    257                        LedOff(RED);
   \   00000130   0x2007             MOVS     R0,#+7
   \   00000132   0x.... 0x....      BL       LedOff
    258                        LedOn(YELLOW);
   \   00000136   0x2005             MOVS     R0,#+5
   \   00000138   0x.... 0x....      BL       LedOn
    259                        LedBlink(YELLOW,u32ledFrequency);  
                                               ^
Warning[Pe188]: enumerated type mixed with another type

  static u32 u32AntDataCount;
             ^
"C:\Users\10428\Desktop\项目model\firmware_common\application\user_app1.c",66  Warning[Pe177]: 
          variable "u32AntDataCount" was declared but never referenced

  static u32 u32AntTickCount;
             ^
"C:\Users\10428\Desktop\项目model\firmware_common\application\user_app1.c",67  Warning[Pe177]: 
          variable "u32AntTickCount" was declared but never referenced

  static u8 au8DataContent_count[]="xxx";
            ^
"C:\Users\10428\Desktop\项目model\firmware_common\application\user_app1.c",73  Warning[Pe177]: 
          variable "au8DataContent_count" was declared but never referenced

  static u32 UserApp1_u32DataMsgCount = 0;   /* ANT_DATA packets received */
             ^
"C:\Users\10428\Desktop\项目model\firmware_common\application\user_app1.c",74  Warning[Pe177]: 
          variable "UserApp1_u32DataMsgCount" was declared but never referenced

  static u32 UserApp1_u32TickMsgCount = 0;   /* ANT_TICK packets received */
             ^
"C:\Users\10428\Desktop\项目model\firmware_common\application\user_app1.c",75  Warning[Pe177]: 
          variable "UserApp1_u32TickMsgCount" was declared but never referenced

  static u8 i=0;
            ^
"C:\Users\10428\Desktop\项目model\firmware_common\application\user_app1.c",78  Warning[Pe177]: 
          variable "i" was declared but never referenced
   \   0000013C   0x....             LDR.N    R0,??DataTable3_19
   \   0000013E   0x6801             LDR      R1,[R0, #+0]
   \   00000140   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000142   0x2005             MOVS     R0,#+5
   \   00000144   0x.... 0x....      BL       LedBlink
   \   00000148   0xE005             B.N      ??UserApp1SM_Idle_15
    260          
    261                      }
    262                      else
    263                      {
    264                        LedOff(RED);
   \                     ??UserApp1SM_Idle_16: (+1)
   \   0000014A   0x2007             MOVS     R0,#+7
   \   0000014C   0x.... 0x....      BL       LedOff
    265                        LedOff(YELLOW);
   \   00000150   0x2005             MOVS     R0,#+5
   \   00000152   0x.... 0x....      BL       LedOff
    266                       }
    267                      break;
   \                     ??UserApp1SM_Idle_15: (+1)
   \   00000156   0xE053             B.N      ??UserApp1SM_Idle_3
    268                    /* Page 1 */
    269                    case 1:
    270                      break;
   \                     ??UserApp1SM_Idle_7: (+1)
   \   00000158   0xE052             B.N      ??UserApp1SM_Idle_3
    271                    /* Page 2 */
    272                    case 2:
    273                      Key = NumberToAscii(G_au8AntApiCurrentMessageBytes[1], au8DataContent_MID);
   \                     ??UserApp1SM_Idle_6: (+1)
   \   0000015A   0x....             LDR.N    R1,??DataTable3_17
   \   0000015C   0x....             LDR.N    R0,??DataTable3_11
   \   0000015E   0x7840             LDRB     R0,[R0, #+1]
   \   00000160   0x.... 0x....      BL       NumberToAscii
   \   00000164   0x....             LDR.N    R1,??DataTable3_12
   \   00000166   0x7008             STRB     R0,[R1, #+0]
    274                      LCDMessage(LINE1_START_ADDR + 5, "MID:");
   \   00000168   0x....             LDR.N    R1,??DataTable3_16
   \   0000016A   0x2005             MOVS     R0,#+5
   \   0000016C   0x.... 0x....      BL       LCDMessage
    275                      LCDMessage(LINE1_START_ADDR + 10, au8DataContent_MID);
   \   00000170   0x....             LDR.N    R1,??DataTable3_17
   \   00000172   0x200A             MOVS     R0,#+10
   \   00000174   0x.... 0x....      BL       LCDMessage
    276                      break;
   \   00000178   0xE042             B.N      ??UserApp1SM_Idle_3
    277                    /* Page 3 */
    278                    case 3:
    279                      Key = NumberToAscii(G_au8AntApiCurrentMessageBytes[3], au8DataContent_PID);
   \                     ??UserApp1SM_Idle_9: (+1)
   \   0000017A   0x....             LDR.N    R1,??DataTable3_20
   \   0000017C   0x....             LDR.N    R0,??DataTable3_11
   \   0000017E   0x78C0             LDRB     R0,[R0, #+3]
   \   00000180   0x.... 0x....      BL       NumberToAscii
   \   00000184   0x....             LDR.N    R1,??DataTable3_12
   \   00000186   0x7008             STRB     R0,[R1, #+0]
    280          
    281                      
    282                      LCDCommand(LCD_CLEAR_CMD);
   \   00000188   0x2001             MOVS     R0,#+1
   \   0000018A   0x.... 0x....      BL       LCDCommand
    283                      LCDMessage(LINE2_START_ADDR, "PID:");
   \   0000018E   0x....             LDR.N    R1,??DataTable3_21
   \   00000190   0x2040             MOVS     R0,#+64
   \   00000192   0x.... 0x....      BL       LCDMessage
    284                      LCDMessage(LINE2_START_ADDR+5, au8DataContent_PID);  
   \   00000196   0x....             LDR.N    R1,??DataTable3_20
   \   00000198   0x2045             MOVS     R0,#+69
   \   0000019A   0x.... 0x....      BL       LCDMessage
    285                      
    286          
    287                      break;
   \   0000019E   0xE02F             B.N      ??UserApp1SM_Idle_3
    288                    /* Page 4 */
    289                    case 4:
    290                      break;
   \                     ??UserApp1SM_Idle_8: (+1)
   \   000001A0   0xE02E             B.N      ??UserApp1SM_Idle_3
    291                    /* Page 5 */
    292                    case 5:
    293                      break;
   \                     ??UserApp1SM_Idle_11: (+1)
   \   000001A2   0xE02D             B.N      ??UserApp1SM_Idle_3
    294                    /* Page 6 */
    295                    case 6:
    296                      break;
   \                     ??UserApp1SM_Idle_10: (+1)
   \   000001A4   0xE02C             B.N      ??UserApp1SM_Idle_3
    297                    /* Page 7 */
    298                    case 7:
    299                      Key = NumberToAscii(G_au8AntApiCurrentMessageBytes[1], au8DataContent_Battery);
   \                     ??UserApp1SM_Idle_13: (+1)
   \   000001A6   0x....             LDR.N    R1,??DataTable3_15
   \   000001A8   0x....             LDR.N    R0,??DataTable3_11
   \   000001AA   0x7840             LDRB     R0,[R0, #+1]
   \   000001AC   0x.... 0x....      BL       NumberToAscii
   \   000001B0   0x....             LDR.N    R1,??DataTable3_12
   \   000001B2   0x7008             STRB     R0,[R1, #+0]
    300                      LCDMessage(LINE1_START_ADDR + 3, "%");
   \   000001B4   0x....             ADR.N    R1,??DataTable3  ;; "%"
   \   000001B6   0x2003             MOVS     R0,#+3
   \   000001B8   0x.... 0x....      BL       LCDMessage
    301                      LCDMessage(LINE1_START_ADDR, au8DataContent_Battery);
   \   000001BC   0x....             LDR.N    R1,??DataTable3_15
   \   000001BE   0x2000             MOVS     R0,#+0
   \   000001C0   0x.... 0x....      BL       LCDMessage
    302                      if(G_au8AntApiCurrentMessageBytes[1] <= 30)
   \   000001C4   0x....             LDR.N    R0,??DataTable3_11
   \   000001C6   0x7840             LDRB     R0,[R0, #+1]
   \   000001C8   0x281F             CMP      R0,#+31
   \   000001CA   0xDA0E             BGE.N    ??UserApp1SM_Idle_17
    303                      {
    304                        LedOff(LCD_GREEN);
   \   000001CC   0x2009             MOVS     R0,#+9
   \   000001CE   0x.... 0x....      BL       LedOff
    305                        LedOff(LCD_BLUE);
   \   000001D2   0x200A             MOVS     R0,#+10
   \   000001D4   0x.... 0x....      BL       LedOff
    306                        PWMAudioSetFrequency(BUZZER1, 262);
   \   000001D8   0xF44F 0x7183      MOV      R1,#+262
   \   000001DC   0x2001             MOVS     R0,#+1
   \   000001DE   0x.... 0x....      BL       PWMAudioSetFrequency
    307                        PWMAudioOn(BUZZER1);
   \   000001E2   0x2001             MOVS     R0,#+1
   \   000001E4   0x.... 0x....      BL       PWMAudioOn
   \   000001E8   0xE008             B.N      ??UserApp1SM_Idle_18
    308                      }
    309                      else 
    310                      {
    311                        PWMAudioOff(BUZZER1); 
   \                     ??UserApp1SM_Idle_17: (+1)
   \   000001EA   0x2001             MOVS     R0,#+1
   \   000001EC   0x.... 0x....      BL       PWMAudioOff
    312                        LedOn(LCD_GREEN);
   \   000001F0   0x2009             MOVS     R0,#+9
   \   000001F2   0x.... 0x....      BL       LedOn
    313                        LedOn(LCD_BLUE);
   \   000001F6   0x200A             MOVS     R0,#+10
   \   000001F8   0x.... 0x....      BL       LedOn
    314                      }
    315                      
    316                      break;
   \                     ??UserApp1SM_Idle_18: (+1)
   \   000001FC   0xE000             B.N      ??UserApp1SM_Idle_3
    317                    /* Page 8 */
    318                    case 8:
    319                      break;
   \                     ??UserApp1SM_Idle_12: (+1)
   \   000001FE   0xE7FF             B.N      ??UserApp1SM_Idle_3
    320                  }
    321                }
    322                /* The process for the ANT_TICK message */
    323                else if(G_eAntApiCurrentMessageClass == ANT_TICK)
    324                {
    325                  //AntQueueAcknowledgedMessage(ANT_CHANNEL_0, au8CommonDataPage_B);
    326                }
    327              }
    328          } /* end UserApp1SM_Idle() */
   \                     ??UserApp1SM_Idle_4: (+1)
   \                     ??UserApp1SM_Idle_3: (+1)
   \   00000200   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .data, align 4
   \                     ??au8CommonDataPage_B:
   \   00000000   0x46 0xFF          DC8 70, 255, 255, 255, 255, 128, 7, 1
   \              0xFF 0xFF    
   \              0xFF 0x80    
   \              0x07 0x01    

   \                                 In section .data, align 4
   \                     ??au8CommonDataPage_MID:
   \   00000000   0x46 0xFF          DC8 70, 255, 255, 255, 255, 128, 2, 1
   \              0xFF 0xFF    
   \              0xFF 0x80    
   \              0x02 0x01    

   \                                 In section .data, align 4
   \                     ??au8CommonDataPage_P:
   \   00000000   0x46 0xFF          DC8 70, 255, 255, 255, 255, 128, 3, 1
   \              0xFF 0xFF    
   \              0xFF 0x80    
   \              0x03 0x01    
    329              
    330          
    331          /*-------------------------------------------------------------------------------------------------------------------*/
    332          /* Handle an error */

   \                                 In section .text, align 4, keep-with-next
    333          static void UserApp1SM_Error(void)          
    334          {
    335            
    336          } /* end UserApp1SM_Error() */
   \                     UserApp1SM_Error: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x25 0x00          DC8      "%",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     UserApp1_sChannelInfo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     G_u32SystemTime1ms

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     UserApp1_u32Timeout

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     UserApp1_StateMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     ??au8CommonDataPage_B

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x........         DC32     ??au8CommonDataPage_P

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x........         DC32     ??au8CommonDataPage_MID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x........         DC32     G_eAntApiCurrentMessageClass

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x........         DC32     G_au8AntApiCurrentMessageBytes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \   00000000   0x........         DC32     Key

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \   00000000   0x........         DC32     au8DataContent_Rate

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \   00000000   0x........         DC32     au8DataContent_Battery

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_16:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_17:
   \   00000000   0x........         DC32     au8DataContent_MID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_18:
   \   00000000   0x........         DC32     abc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_19:
   \   00000000   0x........         DC32     u32ledFrequency

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_20:
   \   00000000   0x........         DC32     au8DataContent_PID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_21:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x20 0x54          DC8 " Task initialized failed\012 "
   \              0x61 0x73    
   \              0x6B 0x20    
   \              0x69 0x6E    
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \              0x7A 0x65    
   \              0x64 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x0A 0x20    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x20 0x55          DC8 " User app setup failed\012 "
   \              0x73 0x65    
   \              0x72 0x20    
   \              0x61 0x70    
   \              0x70 0x20    
   \              0x73 0x65    
   \              0x74 0x75    
   \              0x70 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x0A 0x20    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x54 0x68          DC8 "The heart rate:"
   \              0x65 0x20    
   \              0x68 0x65    
   \              0x61 0x72    
   \              0x74 0x20    
   \              0x72 0x61    
   \              0x74 0x65    
   \              0x3A 0x00    

   \                                 In section .rodata, align 2
   \   00000000   0x25 0x00          DC8 "%"

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x4D 0x49          DC8 "MID:"
   \              0x44 0x3A    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x50 0x49          DC8 "PID:"
   \              0x44 0x3A    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    337          
    338          
    339          
    340          /*--------------------------------------------------------------------------------------------------------------------*/
    341          /* End of File                                                                                                        */
    342          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   UserApp1Initialize
         8   -> AntAssignChannel
         8   -> DebugPrintf
         8   -> LedBlink
         8   -> LedOff
         8   -> LedOn
       8   UserApp1RunActiveState
         8   -- Indirect call
       8   UserApp1SM_AntChannelAssign
         8   -> AntOpenChannelNumber
         8   -> AntRadioStatusChannel
         8   -> DebugPrintf
         8   -> IsTimeUp
       0   UserApp1SM_Error
       8   UserApp1SM_Idle
         8   -> AntQueueAcknowledgedMessage
         8   -> AntReadAppMessageBuffer
         8   -> ButtonAcknowledge
         8   -> LCDCommand
         8   -> LCDMessage
         8   -> LedBlink
         8   -> LedOff
         8   -> LedOn
         8   -> NumberToAscii
         8   -> PWMAudioOff
         8   -> PWMAudioOn
         8   -> PWMAudioSetFrequency
         8   -> WasButtonPressed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_16
       4  ??DataTable3_17
       4  ??DataTable3_18
       4  ??DataTable3_19
       4  ??DataTable3_2
       4  ??DataTable3_20
       4  ??DataTable3_21
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      28  ?_0
      28  ?_1
      16  ?_2
       2  ?_3
       8  ?_4
       8  ?_5
       4  G_u32UserApp1Flags
       1  Key
     204  UserApp1Initialize
      10  UserApp1RunActiveState
      56  UserApp1SM_AntChannelAssign
       2  UserApp1SM_Error
     514  UserApp1SM_Idle
       4  UserApp1_StateMachine
      20  UserApp1_sChannelInfo
       4  UserApp1_u32Timeout
       1  abc
       8  au8CommonDataPage_B
       8  au8CommonDataPage_MID
       8  au8CommonDataPage_P
       4  au8DataContent_Battery
       4  au8DataContent_MID
       4  au8DataContent_PID
       4  au8DataContent_Rate
       4  u32ledFrequency

 
  38 bytes in section .bss
  40 bytes in section .data
  90 bytes in section .rodata
 874 bytes in section .text
 
 874 bytes of CODE  memory
  90 bytes of CONST memory
  78 bytes of DATA  memory

Errors: none
Warnings: 8
